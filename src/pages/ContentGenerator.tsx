import React, { useState } from 'react';
import { FileText, RefreshCw, Check } from 'lucide-react';

export const ContentGenerator = () => {
  const [topics, setTopics] = useState('');
  const [numArticles, setNumArticles] = useState(5);
  const [targetWebsites, setTargetWebsites] = useState<string[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState<any[]>([]);

  // Mock data - in a real app, this would come from your API
  const websites = [
    { id: 1, name: 'Travel Blog', url: 'https://travel-blog-42.com' },
    { id: 2, name: 'Tech News Daily', url: 'https://tech-news-daily.com' },
    { id: 3, name: 'Food Recipes 101', url: 'https://food-recipes-101.com' },
    { id: 4, name: 'Fitness Tips', url: 'https://fitness-tips.com' },
    { id: 5, name: 'Home Decor Ideas', url: 'https://home-decor-ideas.com' },
  ];

  const handleGenerate = () => {
    // In a real app, this would call your API to generate content using ChatGPT
    setIsGenerating(true);
    
    // Simulate API call delay
    setTimeout(() => {
      const mockGeneratedContent = Array.from({ length: numArticles }, (_, i) => ({
        id: i + 1,
        title: `Generated Article ${i + 1} about ${topics.split(',')[0]}`,
        excerpt: `This is a preview of the article content generated by ChatGPT about ${topics.split(',')[0]}...`,
        status: 'generated',
        website: targetWebsites.length > 0 ? websites.find(w => w.id.toString() === targetWebsites[0])?.name : 'Not assigned'
      }));
      
      setGeneratedContent(mockGeneratedContent);
      setIsGenerating(false);
    }, 2000);
  };

  const handlePublish = (id: number) => {
    // In a real app, this would call your API to publish the content to WordPress
    setGeneratedContent(generatedContent.map(content => 
      content.id === id ? { ...content, status: 'published' } : content
    ));
  };

  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold text-gray-800 mb-8">Content Generator</h1>
      
      <div className="bg-white rounded-lg shadow p-6 mb-8">
        <h2 className="text-xl font-semibold mb-4">Generate New Content</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Topics (comma separated)
            </label>
            <textarea
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
              rows={4}
              placeholder="travel, europe, summer vacation, budget travel"
              value={topics}
              onChange={(e) => setTopics(e.target.value)}
            ></textarea>
          </div>
          
          <div>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Number of Articles
              </label>
              <input
                type="number"
                min="1"
                max="50"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={numArticles}
                onChange={(e) => setNumArticles(parseInt(e.target.value))}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Target Websites
              </label>
              <select
                multiple
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                value={targetWebsites}
                onChange={(e) => setTargetWebsites(Array.from(e.target.selectedOptions, option => option.value))}
              >
                {websites.map(website => (
                  <option key={website.id} value={website.id}>
                    {website.name}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>
        
        <button
          className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded flex items-center justify-center w-full md:w-auto"
          onClick={handleGenerate}
          disabled={isGenerating || !topics}
        >
          {isGenerating ? (
            <>
              <RefreshCw className="h-5 w-5 mr-2 animate-spin" />
              Generating...
            </>
          ) : (
            <>
              <FileText className="h-5 w-5 mr-2" />
              Generate Content
            </>
          )}
        </button>
      </div>
      
      {generatedContent.length > 0 && (
        <div className="bg-white rounded-lg shadow overflow-hidden">
          <div className="p-6 border-b">
            <h2 className="text-xl font-semibold">Generated Content</h2>
          </div>
          
          <ul className="divide-y divide-gray-200">
            {generatedContent.map((content) => (
              <li key={content.id} className="p-6">
                <div className="flex items-start justify-between">
                  <div>
                    <h3 className="text-lg font-medium text-gray-900">{content.title}</h3>
                    <p className="mt-1 text-sm text-gray-500">{content.excerpt}</p>
                    <div className="mt-2 flex items-center">
                      <span className="text-sm text-gray-500 mr-4">Target: {content.website}</span>
                      <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                        ${content.status === 'published' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>
                        {content.status}
                      </span>
                    </div>
                  </div>
                  <div className="ml-4">
                    {content.status === 'generated' ? (
                      <button
                        onClick={() => handlePublish(content.id)}
                        className="bg-green-600 hover:bg-green-700 text-white font-medium py-1 px-3 rounded text-sm flex items-center"
                      >
                        <Check className="h-4 w-4 mr-1" />
                        Publish
                      </button>
                    ) : (
                      <button
                        disabled
                        className="bg-gray-300 text-gray-500 font-medium py-1 px-3 rounded text-sm flex items-center cursor-not-allowed"
                      >
                        <Check className="h-4 w-4 mr-1" />
                        Published
                      </button>
                    )}
                  </div>
                </div>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
};